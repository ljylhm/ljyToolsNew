!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports["[ljy_tools]"]=e():t["[ljy_tools]"]=e()}(this,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="./dist",n(n.s=0)}([function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}n.r(e);var o={version:"0.0.1",getDataType:function(t){var e=Object.prototype.toString.call(t);return e?e.substring(8,e.length-1):null},isStr:function(t){return"String"===o.getDataType(t)},isNumber:function(t){return"Number"===o.getDataType(t)},isFunction:function(t){return"Function"===o.getDataType(t)},isArray:function(t){return"Array"===o.getDataType(t)},isBoolean:function(t){return"Boolean"===o.getDataType(t)},isArguments:function(t){return"Arguments"===o.getDataType(t)},isDate:function(t){return"Date"===o.getDataType(t)},isFile:function(t){return"File"===o.getDataType(t)},isBlob:function(t){return"Blob"===o.getDataType(t)},isObject:function(t){return null!==t&&"object"===r(t)},inBrowser:function(){return"undefined"!=typeof window},isEmptyObject:function(t){if(!this.isObject(t))return!1;if(Object.keys)return Object.keys(t).length<=0;for(var e in t)return!1;return!0}},i=o,u={version:"0.0.1",log:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"black",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"white",r=arguments.length>3?arguments[3]:void 0,o="",i=Object.assign({},{color:e,background:n},r);for(var u in i)o+="".concat(u,":").concat(i[u],";");console.log("%c"+t,o)}},a={version:"0.0.1",forEachValue:function(t,e){Object.keys(t).forEach(function(n){return e(t[n],n)})},deepClone:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!t&&!i.isObject(t)&&i.isArray(t))return null;if(i.isEmptyObject(t))return new Object;var e=i.isArray(t)?new Array:new Object;for(var n in t)i.isObject(t[n])||i.isFunction(t[n])?e[n]=this.deepClone(t[n]):e[n]=t[n];return e},baseMerge:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!i.isObject(t)||!i.isObject(e))return null;for(var r in e)t[r]=e[r];return n?this.deepClone(t):t},merge:function(){var t=Array.from(arguments);if(t.length<1)return null;for(var e=t.length,n=0;n<e;n++)this.baseMerge(t[0],t[n]);return t[0]},deepMerage:function(){var t=Array.from(arguments);if(t.length<1)return null;for(var e=t.length,n=0;n<e;n++)t[0]=this.baseMerge(t[0],t[n],!0);return t[0]}},l={a:1,b:2,c:3},c={a:3,b:2,c:1,d:[123]};console.log(a.deepMerage(l,c).d===c.d),a.baseMerge(l,c).d;var s=a,f={version:"0.0.1",getUrl:function(){return window.location.href},getHost:function(){return window.location.hostname},getHash:function(t){return t?t.split("#")[1]||"":window.location.hash},setHash:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=function(t,e){return-1!==t.indexOf("#")?t.split("#")[0]+"#"+e:t+"#"+e};if(e||0==e)return 1==arguments.length?n(this.getUrl(),t):n(t,e)},getSearchParam:function(t){0==arguments.length&&(t=this.getUrl());var e=t.split("?")[1];if(e){var n=e.indexOf("#");return-1!==n?e.substring(0,n).split("&"):e.split("&")}return null},getUrlParam:function(t,e){var n=this,r=function(t,e){var r=n.getSearchParam(t,e);if(r){var o=!0,i=!1,u=void 0;try{for(var a,l=r[Symbol.iterator]();!(o=(a=l.next()).done);o=!0){var c=a.value.split("=");if(e===c[0])return c[1]}}catch(t){i=!0,u=t}finally{try{o||null==l.return||l.return()}finally{if(i)throw u}}return null}return null};return 1===arguments.length?r(this.getUrl(),t):r(t,e)},setUrlParam:function(t,e){var n=this,r=function(t,e){if(!e||i.isEmptyObject(e))return t;var r=t.indexOf("?"),o=t.indexOf("#"),u=-1===r?-1===o?t:t.substring(0,o):t.substring(0,r),a=u.length;return"/"===u.charAt(a-1)&&(u=u.substring(0,a-1)),n.setHash(u+"?"+n.transFormPara(e),n.getHash(t))};return 1===arguments.length?r(this.getUrl(),t):r(t,e)},transFormPara:function(t){var e=[];for(var n in t)e.push(n+"="+t[n]);return e.join("&")}};console.log(f.setUrlParam("https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=split()#index",{a:321,b:123}));var d=f,p={debounce:function(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500;return function(){var r=this;clearTimeout(e),e=setTimeout(function(){t.apply(r,arguments)},n)}},throttle:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=!0;return function(){var r=this;n&&(n=!1,setTimeout(function(){t.apply(r,arguments),n=!0},e))}},dynamicLoadJs:function(t){var e,n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=document.createElement("script"),i=document.getElementsByTagName("script")[0],u=function(){};"function"==typeof r?(e=r,n=u):(e=r.success||u,n=r.error||u),o.attachEvent?(o.attachEvent("onload",e),o.attachEvent("onerror",n)):(o.addEventListener("load",e),o.addEventListener("error",n)),o.src=t,o.type="text/javascript",null==r.isBefore||1==r.isBefore?i.parentNode.insertBefore(o,i):i.parentNode.appendChild(o)}};e.default={verify:i,log:u,object:s,url:d,utils:p,storage:p}}]).default});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,